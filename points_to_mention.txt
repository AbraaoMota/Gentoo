
Important points to mention:

What colour box is my tool?
  - "A state aware" paper has a list of references of tools that are white box, a lot of my papers are black box

Why is it black box?

Why user driven? Why is that a feature?
  - Organic
  - Focus on what matters
  - Using user driven applications means the user can make use of the ENTIRE webpage - we don't skip AJAX, JS, Flash or other plugins 'point and shoots'
    don't use
  - Crawling is a super critical part of these scanners, foregoing that skips a ton of trouble and gives a more in depth representation of the website
  - Skips having to look at things such as WIVET - benchmark for how well scanner goes through JS, Flash and form submissions

QUOTES

"Crawling is arguably the most important part of a web application vulnerability scanner; if the scanner’s attack engine is poor, it might miss a vulnerability, but if its crawling engine is poor and cannot reach the vulnerability, then it will surely miss the vulnerability." - Why johnny can't pentest (2010)


"Our experimental findings confirmed that choosing the right attack vectors for the detection and exploitation of stored XSS and stored SQLI remains a big challenge for black box scanners." - Analysis of effectiveness of black box web application scanners in detection of stored sql injection and stored xss vulnerabilities (2015)

"Scanners need to be improved to use right attack vectors in the right situations" - Analysis of effectiveness of black box web application scanners in detection of stored sql injection and stored xss vulnerabilities (2015)

"C) Adding interactive multistep options to scan. Out of the three scanners, only one scanner had that feature. While the option to set login credentials helps to provide application’s login info for the scanning, it does not instruct the scanners how to visit the pages and where to put attack vectors to exploit and to detect the vulnerabilities." - Analysis of effectivness of black box web app scanners 

"If you can’t crawl it you can’t scan it! " - Acunetix - Commercial tool - https://www.acunetix.com/vulnerability-scanner/javascript-html5-security/


"Note that the information about a web application’s “normal” behavior cannot be gathered using automatic-crawling tools, as these tools usually do not interact with an application following the workflow intended by the developer or using inputs that reflect normal operational patterns." -  FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND VIGNA, G. Toward Automated Detection of Logic Vulnerabilities in Web Applications. In Proceedings of the USENIX Security Symposium (Washington, DC, August 2010).



Evaluation:
  As mentioned in the "state aware paper", the most important metric is
    - True vulnerabilities discovered
  Other important metrics include:
    - Number of False positives - a large number of these basically makes the application impossible to use and massively decreases trust in it
      noone wants to use something that declares bugs where they aren't. Looking into these is also an expensive process.
    - Application code coverage

  Because the tool is going to work as a hybrid scanner with human input, it is important to conduct experiments with people both with and without web security knowledge to see how they perform in identifying and exploiting found vulnerabilities


  How to test my own application:
  - Have a test against WackoPicko - checkout the "Why johnny can't pentest" paper
  - Also look at HacmeBank, WebGoat, SiteGenerator




