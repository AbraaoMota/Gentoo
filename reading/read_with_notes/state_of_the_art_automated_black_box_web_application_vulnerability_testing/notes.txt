State of the Art: Automated Black-Box Web Application Vulnerability Testing

SYNOPSIS:

Aim of the paper is to gather information about the kind of vulnerabilities found in state of the art detectors - are these effective and relevant?

THIS PAPER HAS A LOT OF USEFUL METRICS FOR MEASURING SUCCESS OF A WEBAPP SCANNER AS WELL AS LISTS OF THINGS TO LOOK FOR IN TERMS OF VULNERABILITIES ETC



Used a custom vulnerable web app

XSS and SQLI are not found by a lot of the tools

Important measures
  - Vulnerability Detection (obviously)
  - False positive performance
  - Time elapsed
  - Scanner generated network traffic

Most scanned for vulns are (in order):
  - Information Disclosure
  - Cross Site Scripting
  - SQL Injection
  - Cross Channel Scripting

Scanners are not effective at following links through active content tech such as Java Applets, Silverlight and flash

QUESTION: What are scanning profiles? - A scanning profile is a specific filter used in the scanner application used to limit what vulnerabilities are searched for

QUESTION: A lot of these scanners are approved for 'PCI Compliance testing' - what is that?

TABLE 2 in the paper contains a lot of useful things to look out for and to make my application test against

Scanners devote a lot of their attention to finding XSS and SQLI but by the paper evaluation this is the weakest point of these scanners

Quickest scanner took 66 mins to run, longest one 473 mins (almost 8 hours)

Total data sent and received by largest scanner is almost 1GB of data, fewest is around 70mb


Link types to follow:
  - Javascript events
  - Ajax
  - Silverlight
  - Java applets
  - Flash
  - PHP redirects
  - Meta refresh tag
  - Link encoding
  - Dynamic Javascript
  - Pop up
  - Iframe
  - VBScript
  - POST Link

Some tools required user input to dismiss generated alert messages, sometimes by themselves. This is a good reason to use user-driven scanners

Conclusion - the tools are useful but are still far from finding a significant amount of vulnerabilities, specifically in advanced XSS and second-order SQLI's.
In addition, they are all very ignorant and bad to detecting and making use of active content / scripting languages (silverlight, flash, java applets etc)




